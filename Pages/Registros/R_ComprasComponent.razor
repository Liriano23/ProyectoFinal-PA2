@page "/RegistroCompras"
@page "/RegistroCompras/{CompraId:int}"

<CascadingAuthenticationState>

    <AuthorizeView>
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado!
                </div>
                <div class="card-body">
                    <h5>Atención</h5>
                    <p>Debe iniciar sesion para poder acceder a estas opciones</p>
                    <a href="LogInPage" class="btn btn-primary">Ir al menu de Log-In</a>
                </div>
            </div>
        </NotAuthorized>

        <Authorized>

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>



@if (TipoUsuario)
{
    <EditForm Model="compras" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />

        <div id="MainContainer" class="card">
            <div class="card-header">
                <div class="form-group">
                    <img id="Logo" src="css/Images/ProductsImage.png" title="LogoCompras" alt="Logo para el formulario de Compras" />
                    <h5 id="Titulo">Registró Compras</h5>
                </div>
            </div>

            <div class="card-body">
                <form>
                    @*CompraId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label for="CompraIdPicker">Compra Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="compras.CompraId" id="CompraIdPicker" min="0" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                                            <span class="oi oi-zoom-in" /> Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*SuplidorID*@
                    <div class="form-group">
                        <label for="SuplidorIdPicker"> Suplidor Id </label>
                        <InputSelect @bind-Value="SuplidorID" id="suplerIdPicker" class="form-control">
                            <option value="0">Elige Suplidor</option>
                            @foreach (var suplers in ListaSuplidores)
                                {
                                <option value="@suplers.SuplidorId">@suplers.NombreSuplidor</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="(() => compras.SuplidorId)" />
                        <small id="SuplerIdLineHelper">
                            Seleccione el Suplidor
                        </small>
                    </div>

                    @*Fecha Emision*@
                    <div class="form-group">
                        <label for="DatePicker">Fecha Compra</label>
                        <InputDate @bind-Value="compras.FechaDeCompra" id="DatePicker" class="form-control" readonly="true" />
                        <ValidationMessage For="(() => compras.FechaDeCompra)" />
                        <small id="EntryDateInlineHelper">
                            Fecha de Compra
                        </small>
                    </div>

                    @*UsuarioId*@
                    <div class="form-group">
                        <label for="UsuarioIdSelect">Usuario Id</label>
                        <InputSelect @bind-Value="@UsuarioID" class="form-control">
                            <option value="0">Elige el usuario</option>
                            @foreach (var item in ListaUsuarios)
                                {
                                <option value="@item.UsuarioId">@item.Nombres</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="(() => compras.UsuariosId)" />
                        <small id="UserIdInlineHelper">
                            Ingresar el usuario que esta insertando la Compra
                        </small>
                    </div>

                    @*ITBIS*@
                    <div class="form-group" id="ITBISContainer">
                        <label for="SubTotalInputNumber">ITBIS</label>
                        <InputNumber @bind-Value="compras.ITBIS" id="ITBISInputNumber" class="form-control" @onfocusout="CalcularTotalCompra"/>
                        <ValidationMessage For="(() => compras.ITBIS)" />
                        <small id="TotalInLineHelper">Valor del itbis </small>
                    </div>

                    @*Datos del detalle*@
                    <div class="row">
                        <div class="form-group col">
                            <label>Id</label>
                            <InputNumber @bind-Value="DetalleId" class="form-control" readOnly="true" />
                        </div>

                        @*Producto Id*@
                        <div class="form-group col">
                            <label>Producto Id</label>
                            <InputSelect @bind-Value="ProductoID" class="form-control" @onfocusout="DeterminarPrecioDeCompraProducto">
                                <option value="0" disabled>Elige Producto</option>
                                @foreach (var products in ListaProductos)
                                    {
                                    <option value="@products.ProductoId">@products.NombreProducto</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For="(() => comprasDetalle.ProductoId)" />
                            <small id="ProductsIdLineHelper">
                                Seleccione el id del producto
                            </small>
                        </div>

                        @*Precio*@
                        <div class="form-group col">
                            <label>Precio de Compra</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="precio" class="form-control" ReadOnly="true" />
                                <ValidationMessage For="(() => comprasDetalle.Precio)" />
                            </div>
                            <small id="PriceIdInLineHelper">
                                Precio del de compra del producto
                            </small>
                        </div>

                        @*Cantidad*@
                        <div class="form-group col">
                            <label>Cantidad</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="cantidad" class="form-control" />
                                <ValidationMessage For="(() => comprasDetalle.Cantidad)" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="AgregarAlDetalle">
                                        <i class="oi oi-plus" aria-hidden="true" /> Agregar
                                    </button>
                                </div>
                            </div>
                            <small id="QuantityIdInLineHelper"> Cantidad del producto </small>
                        </div>
                    </div>

                    @*Detallle*@
                    <table class="table" style="border-bottom: 1px groove;">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">Cantidad</th>
                                <th scope="col">Precio</th>
                                <th scope="col">valor</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in compras.Detalle)
                            {
                                <tr>

                                    <td>@item.Cantidad</td>
                                    <td>@item.Precio</td>
                                    <td>@item.Valor</td>
                                    <td><button type="button" class="btn btn-danger" @onclick="(() => EliminarDetalle(item))">Remover</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    @*Descuento*@
                    <div class="form-group" id="DescuentoContainer">
                        <label for="SubTotalInputNumber">Descuento</label>
                        <InputNumber @bind-Value="compras.Descuento" id="ITBISInputNumber" class="form-control" @onfocusout="CalcularTotalCompra" />
                        <ValidationMessage For="(() => compras.Descuento)" />
                        <small id="DiscountInLineHelper">Valor del descuento </small>
                    </div>

                    @*SubTotal*@
                    <div class="form-group" id="SubTotalContainer">
                        <label for="SubTotalInputNumber">SubTotalTotal</label>
                        <InputNumber @bind-Value="compras.SubTotal" id="SubTotalInputNumber" readOnly="true" class="form-control" />
                        <ValidationMessage For="(() => compras.SubTotal)" />
                        <small id="SubtotalTotalInLineHelper">Valor Subtotal de la Compra </small>
                    </div>

                    @*Total*@
                    <div class="form-group" id="TotalContainer">
                        <label for="TotalInputNumber">Total</label>
                        <InputNumber @bind-Value="compras.Total" id="TotalInputNumber" readOnly="true" class="form-control" />
                        <ValidationMessage For="(() => compras.Total)" />
                        <small id="TotalInLineHelper">Valor total de la Compra </small>
                    </div>

                </form>
            </div>

            @*Buttons*@
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                        <span class="oi oi-plus"></span> Nuevo
                    </button>

                    <button type="submit" class="btn btn-lg btn-success">
                        <span class="oi oi-clipboard" aria-hidden="true"></span> Guardar
                    </button>

                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <span class="oi oi-trash"></span>   Eliminar
                    </button>
                </div>
            </div>

        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int CompraId { get; set; }

    Compras compras = new Compras();
    ComprasDetalle comprasDetalle = new ComprasDetalle();

    public string SuplidorID = "0";
    public string ProductoID = "0";
    public string UsuarioID = "0";
    private bool TipoUsuario;


    public int DetalleId = 0;
    public int cantidad = 0;
    public decimal precio = 0;
    public decimal Valor = 0;
    private Usuarios Usuarios { get; set; }
    private Suplidores Suplidores { get; set; }
    private Productos Productos { get; set; } //Validar la existencia para agregar al detalle


    public List<Suplidores> ListaSuplidores { get; set; }
    public List<Productos> ListaProductos { get; set; }
    public List<Usuarios> ListaUsuarios { get; set; }



    protected override void OnInitialized()
    {
        Nuevo();

        if (CompraId > 0)
            Buscar(CompraId);

        TipoUsuario = GetAuthorization();

        ListaSuplidores = SuplidoresBLL.GetList(x => true);
        ListaUsuarios = UsuariosBLL.GetList(x => true);
        ListaProductos = ProductosBLL.GetList(x => true);
    }

    private void Nuevo()
    {
        try
        {
            compras = new Compras();
            ListaUsuarios = UsuariosBLL.GetList(x => true);
            ListaProductos = ProductosBLL.GetList(x => true);

            UsuarioID = "0";
            SuplidorID = "0";
            ProductoID = "0";
            precio = 0;
            Valor = 0;
        }
        catch
        {
            toast.ShowError($"Ha ocurrido un error, Intentelo nuevamente");

        }
    }

    private void Buscar()
    {
        try
        {
            if (compras.CompraId > 0)
            {
                var encontrado = ComprasBLL.Buscar(compras.CompraId);

                if (encontrado != null)
                {
                    this.compras = encontrado;
                    UsuarioID = this.compras.UsuariosId.ToString();
                    SuplidorID = this.compras.SuplidorId.ToString();
                    CalcularTotalCompra();
                }
                else
                {
                    toast.ShowWarning("No encontrado");
                }
            }
        }
        catch (Exception e)
        {
            toast.ShowError($"Ha ocurrido un error {e.Message}, Intentelo nuevamente");
        }
    }

    private void Buscar(int id)
    {
        try
        {
            if (CompraId > 0)
            {
                var encontrado = ComprasBLL.Buscar(id);

                if (encontrado != null)
                {
                    this.compras = encontrado;
                    UsuarioID = this.compras.UsuariosId.ToString();
                    SuplidorID = this.compras.SuplidorId.ToString();
                    CalcularTotalCompra();
                }
                else
                {
                    toast.ShowWarning("No encontrado");
                }
            }
        }
        catch (Exception e)
        {
            toast.ShowError($"Ha ocurrido un error {e.Message}, Intentelo nuevamente");
        }
    }
    private void Guardar()
    {
        bool guardo = false;

        try
        {
            compras.SuplidorId = Convert.ToInt32(SuplidorID);
            compras.UsuariosId = Convert.ToInt32(UsuarioID);
            int id = Convert.ToInt32(ProductoID);

            Usuarios = UsuariosBLL.Buscar(compras.UsuariosId);
            Suplidores = SuplidoresBLL.Buscar(compras.SuplidorId);

            if (VerificarExistenciaBLL.VerificarExistencia(Usuarios, compras.UsuariosId)
            && VerificarExistenciaBLL.VerificarExistencia(Suplidores, compras.SuplidorId)
            && ValidarCantidadDetalle())
            {
                guardo = ComprasBLL.Guardar(compras);
            }
            else if (!ValidarCantidadDetalle()) //Mensaje si el detalle esta  vacio
                toast.ShowError("Debe agregar productos al detalle");
            else
                toast.ShowError("Ha ocurrido un error. Verifique que el Suplidor Id, Producto Id sean correctos");


            if (guardo)
            {
                Nuevo();
                toast.ShowSuccess("Guardado correctamente");
            }
            else
                toast.ShowError("No guardo");
        }
        catch (Exception e)
        {
            toast.ShowError($"Ha ocurrido un error {e.Message}, Intentelo nuevamente");
        }
    }

    private void Eliminar()
    {
        try
        {
            bool elimino = false;
            DisminuirInventario(compras);
            elimino = ComprasBLL.Eliminar(compras.CompraId);

            if (elimino)
            {
                Nuevo();
                toast.ShowSuccess("Elimino Correctamente");
            }
            else
                toast.ShowError("No elimino");
        }
        catch (Exception e)
        {
            toast.ShowError($"Ha ocurrido un error {e.Message}, Intentelo nuevamente");
        }
    }

    private void AgregarAlDetalle()
    {
        int id = Convert.ToInt32(ProductoID);
        Productos = ProductosBLL.Buscar(id);
        try
        {

            if (VerificarExistenciaBLL.VerificarExistencia(Productos, id) && cantidad > 0 && compras.ITBIS >=0)
            {
                compras.Detalle.Add(new ComprasDetalle
                {
                    Id = 0,
                    ProductoId = Convert.ToInt32(ProductoID),
                    CompraId = compras.CompraId,
                    Cantidad = cantidad,
                    Precio = precio,
                    Valor = cantidad * precio
                });
                CalcularTotalCompra();
            }
            else if(cantidad<=0)
                toast.ShowError("La cantidad debe ser mayor que 0");
            else if (compras.ITBIS < 0)
                toast.ShowError("El itbis a aplicar debe ser acorde a la ley 18%.");
            else
                toast.ShowError("No existe este producto en la base de datos. ");


            DetalleId = 0;
            ProductoID = "0";
            cantidad = 0;
            precio = 0;
            Valor = 0;
        }
        catch
        {
            toast.ShowError($"Ha ocurrido un error, Intentelo nuevamente");

        }
    }

    private void EliminarDetalle(ComprasDetalle detalle)
    {
        try
        {
            compras.Detalle.Remove(detalle);
            CalcularTotalCompra();
        }
        catch (Exception e)
        {
            toast.ShowError($"Ha ocurrido un error {e.Message}, Intetelo nuevamente");
        }
    }

    private void CalcularTotalCompra()
    {
        try
        {
            decimal subtotal = 0;
            double itbis = 0;

            foreach (var item in compras.Detalle)
            {
                subtotal = ((subtotal) + (item.Precio * item.Cantidad));
            }

            compras.SubTotal = subtotal;
            itbis = ((compras.ITBIS / 100) * Convert.ToDouble(subtotal));

            compras.Total = ((subtotal + Convert.ToDecimal(itbis)) - (compras.Descuento));
        }
        catch (Exception e)
        {
            toast.ShowError($"Ha ocurrido un error {e.Message}, Intetelo nuevamente");
        }
    }

    private void DeterminarPrecioDeCompraProducto()
    {
        try
        {
            int id = Convert.ToInt32(ProductoID);

            if (ProductosBLL.Existe(id))
            {
                var productos = ProductosBLL.Buscar(id);
                precio = productos.PrecioDeCompra;
            }
            else
                toast.ShowWarning("El producto no exite");
        }
        catch (Exception e)
        {
            toast.ShowError($"Ha ocurrido un error {e.Message}, Intetelo nuevamente");
        }
    }

    private bool ValidarCantidadDetalle()
    {
        bool paso = false;
        if (compras.Detalle.Count > 0)
            paso = true;

        return paso;
    }

    private void DisminuirInventario(Compras compras) //Disminuye el inventario en caso de eliminar una venta
    {
        foreach (var item in compras.Detalle)
        {
            ProductosBLL.DisminuirInventario(item.ProductoId, item.Cantidad);
        }
    }

    private bool GetAuthorization()
    {
        bool acceso;

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador")
            || AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Empleado"))
            acceso = true;
        else
            acceso = false;

        return acceso;
    }

}