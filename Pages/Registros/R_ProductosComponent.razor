@page "/RegistroProductos"
@page "/RegistroProductos/{ProductoId:int}"

<CascadingAuthenticationState>

    <AuthorizeView>
        <NotAuthorized>
            <div class="card text-center">
                <div class="card-header">
                    No Autorizado!
                </div>
                <div class="card-body">
                    <h5>Atención</h5>
                    <p>Debe iniciar sesion para poder acceder a estas opciones</p>
                    <a href="LogInPage" class="btn btn-primary">Ir al menu de Log-In</a>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@if (TipoUsuario)
{
    <EditForm Model="productos" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />

        <div id="MainContainer" class="card">

            <div class="card-header">

                <div class="form-group">
                    <img id="Logo" src="css/Images/ProductsImage.png" title="LogProductos" alt="Logo para el formulario de Productos" />
                    <h5 id="Titulo">Registró Productos</h5>
                </div>
            </div>

            <div class="card-body">
                <form>
                    @*ProdcutosId*@
                    <div class="form-row aling-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label for="ProductosIdPicker">ProductosId</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="productos.ProductoId" autoComplete="off" id="ProductoIdPicker" class="form-control col-4" />
                                    <div class="form-group-append">
                                        <button style="margin-left: 5px;" type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                            <span class="oi oi-zoom-in"></span> Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Nombre Producto*@
                    <div class="form-group">
                        <label for="NombreTextBox">Nombre Producto</label>
                        <InputText @bind-Value="productos.NombreProducto" id="NombreTextBox" class="form-control" autoComplete="off" />
                        <ValidationMessage For="@(() => productos.NombreProducto)" />
                        <small id="NameInLineHelper">
                            Ingresar el nombre del producto
                        </small>
                    </div>

                    @*Marca del producto*@
                    <div class="form-group">
                        <label for="MarcaDelProductoTextBox">Marca del producto</label>
                        <InputText @bind-Value="productos.MarcaProducto" id="MarcaDelProductoTextBox" class="form-control" autocomplete="off" />
                        <ValidationMessage For="(() => productos.MarcaProducto)" />
                        <small id="BrandNameInlineHelper">
                            Ingresar el nombre de la marca
                        </small>
                    </div>

                    @*Inventario*@
                    <div class="form-group">
                        <label for="InventoryTextBox">Inventario</label>
                        <InputNumber @bind-Value="productos.Inventario" id="InventoryTextBox" class="form-control" autoComplete="off"/>
                        <ValidationMessage For="(() => productos.Inventario)" />
                        <small id="InventoryInlineHelper">
                            Ingresar la cantidad del producto en inventario
                        </small>
                    </div>

                    @*Precio Compra*@
                    <div class="form-group">
                        <label>Precio de compra</label>
                        <InputNumber @bind-Value="@productos.PrecioDeCompra" class="form-control" @onfocusout="ValidaPrecio" />
                        <ValidationMessage For="(() => productos.PrecioDeCompra)" />
                        <small id="SellPriceInlineHelper">
                            Ingrese el precio de compra del producto
                        </small>
                    </div>

                    @*Precio Venta*@
                    <div class="form-group">
                        <label>Precio de venta</label>
                        <InputNumber @bind-Value="@productos.PrecioDeVenta" class="form-control" @onfocusout="ValidaPrecio"/>
                        <ValidationMessage For="(() => productos.PrecioDeVenta)" />
                        <small id="SellPriceInlineHelper">
                            Ingrese el precio de venta del producto
                        </small>
                    </div>

                    @*Fecha ingreso*@
                    <div class="form-group">
                        <label for="FechaIngresoDatePicker">Fecha ingreso</label>
                        <InputDate @bind-Value="productos.FechaIngreso" id="FechaIngresoDatePicker" class="form-control" />
                        <ValidationMessage For="(() => productos.FechaIngreso)" />
                        <small id="EntryDateInlineHelper">
                            Ingresar fecha de ingreso del producto
                        </small>
                    </div>

                    @*SuplidorId*@
                    <div class="form-group">
                        <label for="UsuarioIdSelect">SuplidorId</label>
                        <InputSelect @bind-Value="@suplidorId" class="form-control">
                            <option value="0">Elige el suplidor</option>
                            @foreach (var item in listaSuplidores)
                                {
                                <option value="@item.SuplidorId">@item.NombreSuplidor</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="(() => productos.SuplidorId)" />
                        <small id="SupplierIdInlineHelper">
                            Ingresar el suplidor del producto
                        </small>
                    </div>

                    @*CategoríaId*@
                    <div class="form-group">
                        <label for="CategoriaIdSelect">CategoríaId</label>
                        <InputSelect @bind-Value="@categoriaId" id="CategoriaIdSelect" class="form-control">
                            <option value="0">Elige la categoria</option>
                            @foreach (var item in listaCategorias)
                                {
                                <option value="@item.CategoriaId">@item.NombreCategoria</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="(() => productos.CategoriaId)" />
                        <small id="SupplierIdInlineHelper">
                            Ingresar la categoría del productos
                        </small>
                    </div>

                    @*UsuarioId*@
                    <div class="form-group">
                        <label for="UsuarioIdSelect">UsuarioId</label>
                        <InputSelect @bind-Value="@usuarioId" class="form-control">
                            <option value="0">Elige el usuario</option>
                            @foreach (var item in listaUsuarios)
                                {
                                <option value="@item.UsuarioId">@item.Nombres</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="(() => productos.UsuariosId)" />
                        <small id="UserIdInlineHelper">
                            Ingresar el usuario que esta insertando el producto
                        </small>
                    </div>

                </form>

            </div>

            @*Buttons*@
            <div class="card-footer">

                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                        <span class="oi oi-plus" aria-hidden="true"></span> Nuevo
                    </button>

                    <button type="submit" class="btn btn-lg btn-success">
                        <span class="oi oi-clipboard" aria-hidden="true"></span> Guardar
                    </button>

                    <button class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <span class="oi oi-trash" aria-hidden="true"></span> Eliminar
                    </button>
                </div>

            </div>
        </div>
    </EditForm>
}


@code {

    [Parameter]
    public int ProductoId { get; set; }
    Productos productos = new Productos();

    private bool TipoUsuario;
    private string usuarioId;
    private string suplidorId;
    private string categoriaId;
    bool precioValido = false;

    private Usuarios Usuarios { get; set; }
    private Categorias Categorias { get; set; }
    private Suplidores Suplidores { get; set; }

    List<Usuarios> listaUsuarios = new List<Usuarios>();
    List<Categorias> listaCategorias = new List<Categorias>();
    List<Suplidores> listaSuplidores = new List<Suplidores>();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();

        if (ProductoId > 0)
            Buscar(ProductoId);

        TipoUsuario = GetAuthorization();

        listaUsuarios = UsuariosBLL.GetList(x => true);
        listaCategorias = CategoriasBLL.GetList(x => true);
        listaSuplidores = SuplidoresBLL.GetList(x => true);

        usuarioId = "0";
        suplidorId = "0";
        categoriaId = "0";
    }

    private void Nuevo()
    {
        try
        {
            productos = new Productos();
            listaUsuarios = UsuariosBLL.GetList(x => true);
            listaCategorias = CategoriasBLL.GetList(x => true);
            listaSuplidores = SuplidoresBLL.GetList(x => true);

            usuarioId = "0";
            suplidorId = "0";
            categoriaId = "0";
        }
        catch
        {
            toast.ShowError($"Ha ocurrido un error, Intentelo nuevamente");

        }
    }

    private void Guardar()
    {
        bool guardo = false;
        productos.UsuariosId = Convert.ToInt32(usuarioId);
        productos.SuplidorId = Convert.ToInt32(suplidorId);
        productos.CategoriaId = Convert.ToInt32(categoriaId);

        Usuarios = UsuariosBLL.Buscar(productos.UsuariosId);
        Categorias = CategoriasBLL.Buscar(productos.CategoriaId);
        Suplidores = SuplidoresBLL.Buscar(productos.SuplidorId);

        try
        {

            if (VerificarExistenciaBLL.VerificarExistencia(Usuarios, productos.UsuariosId)
                && VerificarExistenciaBLL.VerificarExistencia(Categorias, productos.CategoriaId)
                && VerificarExistenciaBLL.VerificarExistencia(Suplidores, productos.SuplidorId)
                && precioValido)
            {
                guardo = ProductosBLL.Guardar(productos);
            }
            else
                toast.ShowError("Ha ocurrido un error. Verifique que el Usuario, Categoria, Suplidor Id  o Precio de venta sean correctos");

            if (guardo)
            {
                Nuevo();
                toast.ShowSuccess("Guardado correctamente");
            }
            else
                toast.ShowError("No guardo");
        }
        catch (Exception e)
        {

            toast.ShowError($"Ha ocurrido un error {e.Message}, Intentelo nuevamente");
        }
    }

    private void Buscar()
    {
        try
        {
            if (productos.ProductoId > 0)
            {

                var encontrado = ProductosBLL.Buscar(productos.ProductoId);
                if (encontrado != null)
                {
                    this.productos = encontrado;

                    categoriaId = this.productos.CategoriaId.ToString();
                    suplidorId = this.productos.SuplidorId.ToString();
                    usuarioId = this.productos.UsuariosId.ToString();
                }
                else
                    toast.ShowWarning("No se encontrado");
            }
        }
        catch (Exception e)
        {

            toast.ShowError($"Ha ocurrido un error con la base de datos {e.Message}, Intentelo nuevamente");
        }
    }

    private void Buscar(int id)
    {
        try
        {
            if (ProductoId > 0)
            {

                var encontrado = ProductosBLL.Buscar(id);

                if (encontrado != null)
                {
                    this.productos = encontrado;

                    categoriaId = this.productos.CategoriaId.ToString();
                    suplidorId = this.productos.SuplidorId.ToString();
                    usuarioId = this.productos.UsuariosId.ToString();
                }
                else
                    toast.ShowWarning("No se encontrado");
            }
        }
        catch (Exception e)
        {

            toast.ShowError($"Ha ocurrido un error con la base de datos {e.Message}, Intentelo nuevamente");
        }
    }
    private void Eliminar()
    {
        bool eliminar = false;
        try
        {
            eliminar = ProductosBLL.Eliminar(productos.ProductoId);
            if (eliminar)
            {
                Nuevo();
                toast.ShowSuccess("Elimino correctamente");
            }
            else
                toast.ShowError("No fue posible eliminar el procucto intentelo nuevamente");
        }
        catch (Exception e)
        {

            toast.ShowError($"Ha ocurrido un error con la base de datos {e.Message}, Intentelo nuevamente");
        }
    }

    private bool GetAuthorization()
    {
        bool acceso;

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador")
            || AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Empleado"))
            acceso = true;
        else
            acceso = false;

        return acceso;
    }

    private void ValidaPrecio()
    {
        try
        {
            if(productos.PrecioDeVenta <=0)
            {
                precioValido = false;
                toast.ShowWarning("El precio de venta no puede ser menor o igual 0 ");
            }
            else if (productos.PrecioDeVenta <= productos.PrecioDeCompra)
            {
                precioValido = false;
                toast.ShowWarning("El precio de venta no puede ser menor al precio de compra");
            }
            else
            {
                precioValido = true;
            }
        }
        catch
        {
            toast.ShowError($"Ha ocurrido un error, Intentelo nuevamente");

        }

    }

}
